Programming Assignment 2: Simple TCP­like transport­layer protocol

UNI: jl4347
Name: Jialun Liu

=======================================================================================
How to Use
=======================================================================================
In order to build the application first, run the following command:
$ make all

Then run TCPreceiver and TCPsender:
java TCPreceiver <filename> <listening_port> <sender_IP> <sender_port> <log_filename>

java TCPsender <filename> <remote_IP> <remote_port> <ack_port_num> <log_filename> 
<window_size>

The default window size of TCP sender is 1.

Sample command lines for receiver and sender:
java TCPreceiver test.txt 20002 192.168.0.2 20003 stdout

java TCPsender sample.txt 192.168.0.2 20002 20003 stdout 100

=======================================================================================
Program Structure
=======================================================================================
1. TCPreceiver.java:
Receive the list of the datagrams for the specified file, designed to deal with packet loss,
corruption, duplication and reordering.

All those all achieved by implementing the Go-Back-N protocol.

2. TCPsender.java:
Send the list of the datagrams to the specified receiver Designed to deal with packet loss,
corruption, duplication and reordering.

Using the GBN protocol to provide a pipeline imp the specified log file.

=======================================================================================
TCP segment structure
=======================================================================================
The datagram header includes the following information:
1. source port
2. de
Loss Recovery Mechanism
=======================================================================================
The TCP sender and receiver implements the Go-Back-N protocol as its loss recovery mechanism.

The sender maintains a send window which has size specified by user, and the window is
aligns are sent and ACKed.

Receiver uses only one variable "sequenceNumber" to keep track of the next expected datagram.
It only acks back to sender when the received datagram has the sequence number matching the
"sequenceNumber". The r